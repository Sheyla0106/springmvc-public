package com.sheyla.springmvc.controller.demo.object;

/**
 * @Author: sheyla
 * @Description:
 * @Date:Create：in 2019/6/10 0:50
 * @Modified By：
 */
public class MyObject {
    public static void main(String[] args) {
        //java 运算符 与（&）、非（~）、或（|）、异或（^）
        // 10 11 ^ =1
        // 3          = 0000 0000 0000 0000 0000 0000 0000 0011
        // ~3         = 1111 1111 1111 1111 1111 1111 1111 1100（补码）
        // 取反        = 1000 0000 0000 0000 0000 0000 0000 0011
        // 加1        = 1000 0000 0000 0000 0000 0000 0000 0100 （原码）

        //        减1 = 1111 1111 1111 1111 1111 1111 1111 1011
        //       取反 = 1000 0000 0000 0000 0000 0000 0000 0100（原码）
        //

        //    -33   = 1000 0000 0000 0000 0000 0000 1000 0001  原码
        //          = 1111 1111 1111 1111 1111 1111 0111 1110  反码
        //          = 1111 1111 1111 1111 1111 1111 0111 1111  补码
        //  取反     = 1000 0000 0000 0000 0000 0000 1000 0000
           //       = 1000 0000 0000 0000 0000 0000 1000 0001
        //


        System.out.println(2 ^ 3);
        System.out.println(2 & 3);
        System.out.println(2 | 3);
        System.out.println(~3);
        // 正数的二进制原码、反码、补码都是相同的
        //
        //比如-32
        //
        //第一步，原码为：10100000
        //第二步，最高位不变取反：11011111
        //第三步，加一得补码：11100000
        //对于有符号数而言：
        //
        //      (1)二进制的最高位是符号位：0表示正数，1表示负数
        //
        //      (2)正数的原码、反码、补码都一样；
        //
        //      (3)负数的反码 =  它的原码符号位不变，其他位取反（0 ->1 ; 1->0 ）；
        //
        //      (4)负数的补码 = 它的反码 +1；
        //
        //      (5)0的反码、补码都是0；
        //
        //      (6)在计算机运算的时候，都是以补码的方式来运算的；
        //  0001
        //  1001=-1
        //  1110=（反码）
        //  1111=（补码）

        //

    }

    private static void myGetClass() {
        Number n = 0;
        System.out.println(n.getClass());
    }

    private static void myHashCode() {
        //String hashCode()
        // for (int i = 0; i < value.length; i++) {
        //                h = 31 * h + val[i];
        //            }

        //s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]
        //s[i]=s[i]*31^((n-1)-i) Sn=lim(s[i]*31^((n-1)-i))  lim->0-(n-1)
        String a = "0";//数字=0~9  48~57
        //31*0 + 48
        System.out.println(a.hashCode());

        String b = "1";//数字=0~9  48~57  h = 31 * h + val[i];
        // 31*0 + 49
        System.out.println(b.hashCode());

        String c = "101";//数字=0~9  48~57  h = 31 * h + val[i];
        // i=0  h=31 * 0 + 49 = 49
        // i=1  h=31* 49 + 48= 1567
        // i=2  h=31*1567 +48 = 48626

        System.out.println(c.hashCode());
    }

}
